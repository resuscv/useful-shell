#!/bin/sh
### Vulcan is my version of Flashbake.
#  vulcan --vcsh --sshkey keyname repo
#  vulcan git_directory

#DEBUG=1

readonly PROGNAME="vulcan"
TMPDIR=~/tmp

# Handle the case of older git installs.
GIT_MERGE_AUTOEDIT=no

ERROR_COUNT=0
# Default is 30 seconds for the ssh-agent key lifetime.
SSH_LIFETIME=30

die() {
    echo "$@"

    # If there is an output file defined, show it then remove it
    if [ -f "${OutputFile}" ]; then
	cat ${OutputFile}
	rm -f ${OutputFile}
    fi

    exit 1
}

usage() {
  cat <<EOF
	Usage:   ${PROGRAMME_NAME}  [flags]  <directory_name or vcsh repo>

	Automation to version control your files.  A flashbake replacement.

	Vulcan was written because I couldn't get flashbake to work and it
	didn't look supported.  See the URL below for the history of
	flashbake.

	http://bitbucketlabs.net/flashbake/
	https://github.com/resuscv/useful-shell    [for Vulcan development]

	OPTIONS:
	   -v, --vcsh <repo>
		Use 'vcsh + git' rather than straight git.

	   -d, --debug
		Switch on debugging and display what would happen.

	   --sshkey <keyid>
		Use the SSH key with ID 'keyid'.  Add to the ssh-agent.

	   --sshlifetime <seconds>
		Set a maximum lifetime when adding identities to the ssh-agent.
		The lifetime may be specified in seconds or in a time format
		specified in sshd_config(5).  See also ssh-add(1).

	   --notall
		Don't push all refs under refs/heads (see git-push)

	   --nopush, --nopull, --nonet
		Don't push / pull / push & pull (i.e. no NETwork)

	   --tmpdir <tmpdir>
		The directory in which working files are written.  This includes the
		lock file to make sure warning messages are not sent too often.
		Currently set to:  ${TMPDIR}

	   -h, --help
		HELP?  Can anyone hear me?
EOF
  exit 1
}


# No arguments on the command line, mean you need some help.
[ $# -gt 0 ] \
    || usage


ARGS=$(getopt \
-n "${PROGRAMME_NAME}" \
-o "vdh" \
--long "vcsh,sshkey:,sshlifetime:,debug,help,notall,nopush,nopull,nonet,tmpdir:" \
-- "$@")

# Die if they fat finger arguments
[ $? = 0 ] || die "Error parsing arguments. Try $PROGRAM_NAME --help"

# Assume it is a standard git directory unless we hear otherwise
MODE="standard"
_E=""

if [ -n "$DEBUG" ]; then
    _E=echo
fi

variable_exists() {
    local var=$1

    [ ! -z "$var" ]
}


# Assume that the git command is simply git, but if it is a vcsh command we will change this...
GIT="${_E} git"

# By default we push all branches upstream
ALL="--all"

unset REPO

eval set -- "$ARGS"
while true; do
  case $1 in
    -h|--help)
      usage; continue
      ;;
    -v|--vcsh)
      MODE="vcsh"; shift; continue
      ;;
    --sshkey)
      SSHKEY="$2"; shift 2; continue
      ;;
    --sshlifetime)
      SSH_LIFETIME="$2"; shift 2; continue
      ;;
    -d|--debug)
      _E=echo; shift; continue
      ;;
    --notall)
      unset ALL; shift; continue
      ;;
    --nopush)
      nopush="1"; shift; continue
      ;;
    --nopull)
      nopull="1"; shift; continue
      ;;
    --nonet)
      nopush="1"; nopull="1"; shift; continue
      ;;
    --tmpdir)
      TMPDIR="$2"; shift 2; continue
      ;;
    --)
      # No more arguments to parse
      break
      ;;
    *)
      printf "Unknown option %s\n" "$1"
      exit 1
      ;;
  esac
done

shift

REPO=$1 && shift

[[ -z "${REPO}" ]] \
    && usage

if [ $MODE == "vcsh" ]; then
    GIT="${_E} vcsh run $REPO git"
fi


# This is the temporary file in which output will be written
OutputFile=`mktemp --tmpdir=${TMPDIR}`
if [ -n "${_E}" ]; then
    echo "Temporary log file: ${OutputFile}"
fi


echo "--------> $REPO <--" >> ${OutputFile}
echo "`date`" >> ${OutputFile}


### Steps
# - add and commit current changes
# - if a ssh key is defined add it to the ssh-agent  [ARGUMENT]
# - pull orgin/master
# - check the merge
#   - if a clean merge do the merge
#     - if origin is bare then push to orgin  [ARGUMENT]
#   - if merge is not clean
#     - DO NOT merge
#     - email that the merge failed
#


#####
# Add and commit changes
#####
if [ "x$MODE" = "xstandard" ]; then
  if [ ! -d $REPO ]; then
    cat <<EOF
!!! ERROR !!!   `date`
!!! ERROR !!!   This path is not a git repo:  `pwd`
EOF
    exit 1
  else
    # Only run if the directory is actually a git repo
    cd $REPO
    if [ $(git status 1>/dev/null 2>&1 ; echo $?) -eq 0 ]; then
	${GIT} add . >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
	${GIT} commit -q -m "Auto commit by vulcan" >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
    else
      cat <<EOF
!!! ERROR !!!   `date`
!!! ERROR !!!   This path is not a git repo:  `pwd`
EOF
      exit 1
    fi
  fi
elif [ "x$MODE" = "xvcsh" ]; then
    ${GIT} add . >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
    ${GIT} commit -q -m Vulcan_autocommit >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
fi


#####
# Add key to agent
#####
if [ ! -z "${SSHKEY}" ]; then
  if [ -z "${SSH_AUTH_SOCK}" ]; then
    ${_E} eval `ssh-agent` >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
  fi
  ${_E} ssh-add -t ${SSH_LIFETIME} ${SSHKEY} >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`
fi


#####
# Pull origin master
#####

CheckNotLocked() {
    local lockfile=${1}
    local lockfile_new=${lockfile}.new

    touch ${lockfile_new}

    if [ ${lockfile_new} -nt ${lockfile} ]; then
	touch --date="`date --date='+ 1 day'`" ${lockfile}
	rm -f ${lockfile_new}
	true
    else
	false
    fi
}


FixFailedMerge() {
    local LOCKFILE=${TMPDIR}/${REPO}.lock
    ${GIT} reset --hard >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`

    CheckNotLocked ${LOCKFILE} \
	&& cat <<EOF
  MERGE FAILED

- Local  revision:  $(command ${GIT} rev-parse --short HEAD 2> /dev/null)
- Remote revision:  $(command ${GIT} rev-parse --short origin/master 2> /dev/null)

Local reset to the last good commit.

You NEED to fix this.

(Lockfile: ${LOCKFILE})
EOF

  exit 2
}



variable_exists ${nopull} \
    || ${GIT} pull --quiet  >> ${OutputFile} 2>&1 \
    || FixFailedMerge


#####
# Push ALL(?) branches
####
variable_exists ${nopush} \
    || ${GIT} push -u ${ALL} >> ${OutputFile} 2>&1 ; ERROR_COUNT=`expr ${ERROR_COUNT} + $?`


if [ -n "${_E}" ] || [ ${ERROR_COUNT} -gt 0 ]; then
    echo "Error count is : ${ERROR_COUNT}"
    cat ${OutputFile}
fi

rm -f ${OutputFile}

#echo "mode = $MODE"
#echo "sshkey = $SSHKEY"
#echo "repo = $REPO"

exit ${ERROR_COUNT}
## END
